const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, MessageFlags } = require('discord.js');
const config = require('../../config');
const { getMessage } = require('../../config/messages');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('autorole')
        .setDescription('Gestion des autor√¥les et s√©lection de langue')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles)
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Configure le syst√®me d\'autor√¥les')
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('Canal o√π envoyer le message d\'autor√¥les')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('language')
                .setDescription('Envoie le s√©lecteur de langue')
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('Canal o√π envoyer le s√©lecteur de langue')
                        .setRequired(true)
                )
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('roles')
                .setDescription('Envoie le s√©lecteur de r√¥les')
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('Canal o√π envoyer le s√©lecteur de r√¥les')
                        .setRequired(true)
                )
        ),
    
    cooldown: 5,

    async execute(interaction) {
        // V√©rifier les permissions
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles) && 
            interaction.user.id !== config.ownerId) {
            return interaction.reply({ 
                content: '‚ùå Vous n\'avez pas les permissions pour utiliser cette commande.', 
                flags: MessageFlags.Ephemeral 
            });
        }

        const subcommand = interaction.options.getSubcommand();
        const channel = interaction.options.getChannel('canal');

        try {
            await interaction.deferReply({ flags: MessageFlags.Ephemeral });

            switch (subcommand) {
                case 'setup':
                    await handleSetup(interaction, channel);
                    break;
                case 'language':
                    await handleLanguage(interaction, channel);
                    break;
                case 'roles':
                    await handleRoles(interaction, channel);
                    break;
            }

        } catch (error) {
            console.error('Erreur lors de l\'ex√©cution de la commande autorole:', error);
            
            const errorMessage = '‚ùå Une erreur est survenue lors du traitement de votre demande.';
            
            if (interaction.deferred) {
                await interaction.editReply({ content: errorMessage });
            } else {
                await interaction.reply({ content: errorMessage, flags: MessageFlags.Ephemeral });
            }
        }
    },
};

async function handleSetup(interaction, channel) {
    // Envoyer les deux messages: langue et r√¥les
    await handleLanguage(interaction, channel, false);
    await handleRoles(interaction, channel, false);
    
    await interaction.editReply({ 
        content: `‚úÖ Syst√®me d'autor√¥les configur√© dans ${channel} !` 
    });
}

async function handleLanguage(interaction, channel, reply = true) {
    // Cr√©er l'embed pour la s√©lection de langue
    const languageEmbed = new EmbedBuilder()
        .setTitle('üåç S√©lection de langue / Language Selection')
        .setColor(config.colors.info)
        .setDescription(
            '**Fran√ßais:** Choisissez votre langue pr√©f√©r√©e pour recevoir les messages du bot dans votre langue.\n\n' +
            '**English:** Choose your preferred language to receive bot messages in your language.'
        )
        .addFields(
            {
                name: 'üá´üá∑ Fran√ßais',
                value: 'Langue par d√©faut du bot',
                inline: true
            },
            {
                name: 'üá¨üáß English',
                value: 'Default bot language',
                inline: true
            }
        )
        .setFooter({ 
            text: 'Cliquez sur un bouton pour s√©lectionner votre langue ‚Ä¢ Click a button to select your language', 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    // Cr√©er les boutons de langue
    const languageButtons = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('language_fr')
                .setLabel('Fran√ßais')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üá´üá∑'),
            new ButtonBuilder()
                .setCustomId('language_en')
                .setLabel('English')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üá¨üáß')
        );

    // Envoyer le message dans le canal
    await channel.send({
        embeds: [languageEmbed],
        components: [languageButtons]
    });

    if (reply) {
        await interaction.editReply({ 
            content: `‚úÖ S√©lecteur de langue envoy√© dans ${channel} !` 
        });
    }
}

async function handleRoles(interaction, channel, reply = true) {
    // Cr√©er l'embed pour la s√©lection de r√¥les
    const rolesEmbed = new EmbedBuilder()
        .setTitle('üé≠ S√©lection de r√¥les')
        .setColor(config.colors.secondary)
        .setDescription(
            'Choisissez vos r√¥les pour personnaliser votre exp√©rience sur le serveur !\n\n' +
            '**R√¥les disponibles:**\n' +
            'üîî **Notifications** - Recevez les annonces importantes'
        )
        .addFields(
            {
                name: 'üìã Instructions',
                value: 'Cliquez sur les boutons ci-dessous pour ajouter ou retirer les r√¥les correspondants.',
                inline: false
            },
            {
                name: '‚ö†Ô∏è Note',
                value: 'Vous pouvez s√©lectionner plusieurs r√¥les. Cliquez √† nouveau sur un bouton pour retirer le r√¥le.',
                inline: false
            }
        )
        .setFooter({ 
            text: 'MenMuse Bot ‚Ä¢ Syst√®me d\'autor√¥les', 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    // Cr√©er les boutons de r√¥les
    const rolesButtons = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`role_${config.roles.notifications || 'notifications'}`)
                .setLabel('Notifications')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('üîî')
        );

    // Envoyer le message dans le canal
    await channel.send({
        embeds: [rolesEmbed],
        components: [rolesButtons]
    });

    if (reply) {
        await interaction.editReply({ 
            content: `‚úÖ S√©lecteur de r√¥les envoy√© dans ${channel} !` 
        });
    }
}